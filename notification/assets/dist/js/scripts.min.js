!function(t,e){"function"==typeof define&&define.amd?define("sifter",e):"object"==typeof exports?module.exports=e():t.Sifter=e()}(this,function(){var t=function(t,e){this.items=t,this.settings=e||{diacritics:!0}};t.prototype.tokenize=function(t){if(!(t=o(String(t||"").toLowerCase()))||!t.length)return[];var e,n,i,s,c=[],l=t.split(/ +/);for(e=0,n=l.length;e<n;e++){if(i=r(l[e]),this.settings.diacritics)for(s in a)a.hasOwnProperty(s)&&(i=i.replace(new RegExp(s,"g"),a[s]));c.push({string:l[e],regex:new RegExp(i,"i")})}return c},t.prototype.iterator=function(t,e){var n;n=s(t)?Array.prototype.forEach||function(t){for(var e=0,n=this.length;e<n;e++)t(this[e],e,this)}:function(t){for(var e in this)this.hasOwnProperty(e)&&t(this[e],e,this)},n.apply(t,[e])},t.prototype.getScoreFunction=function(t,e){var n,o,r,s,a;n=this,t=n.prepareSearch(t,e),r=t.tokens,o=t.options.fields,s=r.length,a=t.options.nesting;var c=function(t,e){var n,i;return t?(t=String(t||""),-1===(i=t.search(e.regex))?0:(n=e.string.length/t.length,0===i&&(n+=.5),n)):0},l=function(){var t=o.length;return t?1===t?function(t,e){return c(i(e,o[0],a),t)}:function(e,n){for(var r=0,s=0;r<t;r++)s+=c(i(n,o[r],a),e);return s/t}:function(){return 0}}();return s?1===s?function(t){return l(r[0],t)}:"and"===t.options.conjunction?function(t){for(var e,n=0,i=0;n<s;n++){if((e=l(r[n],t))<=0)return 0;i+=e}return i/s}:function(t){for(var e=0,n=0;e<s;e++)n+=l(r[e],t);return n/s}:function(){return 0}},t.prototype.getSortFunction=function(t,n){var o,r,s,a,c,l,u,d,p,f,h;if(s=this,t=s.prepareSearch(t,n),h=!t.query&&n.sort_empty||n.sort,p=function(t,e){return"$score"===t?e.score:i(s.items[e.id],t,n.nesting)},c=[],h)for(o=0,r=h.length;o<r;o++)(t.query||"$score"!==h[o].field)&&c.push(h[o]);if(t.query){for(f=!0,o=0,r=c.length;o<r;o++)if("$score"===c[o].field){f=!1;break}f&&c.unshift({field:"$score",direction:"desc"})}else for(o=0,r=c.length;o<r;o++)if("$score"===c[o].field){c.splice(o,1);break}for(d=[],o=0,r=c.length;o<r;o++)d.push("desc"===c[o].direction?-1:1);return l=c.length,l?1===l?(a=c[0].field,u=d[0],function(t,n){return u*e(p(a,t),p(a,n))}):function(t,n){var i,o,r;for(i=0;i<l;i++)if(r=c[i].field,o=d[i]*e(p(r,t),p(r,n)))return o;return 0}:null},t.prototype.prepareSearch=function(t,e){if("object"==typeof t)return t;e=n({},e);var i=e.fields,o=e.sort,r=e.sort_empty;return i&&!s(i)&&(e.fields=[i]),o&&!s(o)&&(e.sort=[o]),r&&!s(r)&&(e.sort_empty=[r]),{options:e,query:String(t||"").toLowerCase(),tokens:this.tokenize(t),total:0,items:[]}},t.prototype.search=function(t,e){var n,i,o,r,s=this;return i=this.prepareSearch(t,e),e=i.options,t=i.query,r=e.score||s.getScoreFunction(i),t.length?s.iterator(s.items,function(t,o){n=r(t),(!1===e.filter||n>0)&&i.items.push({score:n,id:o})}):s.iterator(s.items,function(t,e){i.items.push({score:1,id:e})}),o=s.getSortFunction(i,e),o&&i.items.sort(o),i.total=i.items.length,"number"==typeof e.limit&&(i.items=i.items.slice(0,e.limit)),i};var e=function(t,e){return"number"==typeof t&&"number"==typeof e?t>e?1:t<e?-1:0:(t=c(String(t||"")),e=c(String(e||"")),t>e?1:e>t?-1:0)},n=function(t,e){var n,i,o,r;for(n=1,i=arguments.length;n<i;n++)if(r=arguments[n])for(o in r)r.hasOwnProperty(o)&&(t[o]=r[o]);return t},i=function(t,e,n){if(t&&e){if(!n)return t[e];for(var i=e.split(".");i.length&&(t=t[i.shift()]););return t}},o=function(t){return(t+"").replace(/^\s+|\s+$|/g,"")},r=function(t){return(t+"").replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")},s=Array.isArray||"undefined"!=typeof $&&$.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)},a={a:"[aḀḁĂăÂâǍǎȺⱥȦȧẠạÄäÀàÁáĀāÃãÅåąĄÃąĄ]",b:"[b␢βΒB฿𐌁ᛒ]",c:"[cĆćĈĉČčĊċC̄c̄ÇçḈḉȻȼƇƈɕᴄＣｃ]",d:"[dĎďḊḋḐḑḌḍḒḓḎḏĐđD̦d̦ƉɖƊɗƋƌᵭᶁᶑȡᴅＤｄð]",e:"[eÉéÈèÊêḘḙĚěĔĕẼẽḚḛẺẻĖėËëĒēȨȩĘęᶒɆɇȄȅẾếỀềỄễỂểḜḝḖḗḔḕȆȇẸẹỆệⱸᴇＥｅɘǝƏƐε]",f:"[fƑƒḞḟ]",g:"[gɢ₲ǤǥĜĝĞğĢģƓɠĠġ]",h:"[hĤĥĦħḨḩẖẖḤḥḢḣɦʰǶƕ]",i:"[iÍíÌìĬĭÎîǏǐÏïḮḯĨĩĮįĪīỈỉȈȉȊȋỊịḬḭƗɨɨ̆ᵻᶖİiIıɪＩｉ]",j:"[jȷĴĵɈɉʝɟʲ]",k:"[kƘƙꝀꝁḰḱǨǩḲḳḴḵκϰ₭]",l:"[lŁłĽľĻļĹĺḶḷḸḹḼḽḺḻĿŀȽƚⱠⱡⱢɫɬᶅɭȴʟＬｌ]",n:"[nŃńǸǹŇňÑñṄṅŅņṆṇṊṋṈṉN̈n̈ƝɲȠƞᵰᶇɳȵɴＮｎŊŋ]",o:"[oØøÖöÓóÒòÔôǑǒŐőŎŏȮȯỌọƟɵƠơỎỏŌōÕõǪǫȌȍՕօ]",p:"[pṔṕṖṗⱣᵽƤƥᵱ]",q:"[qꝖꝗʠɊɋꝘꝙq̃]",r:"[rŔŕɌɍŘřŖŗṘṙȐȑȒȓṚṛⱤɽ]",s:"[sŚśṠṡṢṣꞨꞩŜŝŠšŞşȘșS̈s̈]",t:"[tŤťṪṫŢţṬṭƮʈȚțṰṱṮṯƬƭ]",u:"[uŬŭɄʉỤụÜüÚúÙùÛûǓǔŰűŬŭƯưỦủŪūŨũŲųȔȕ∪]",v:"[vṼṽṾṿƲʋꝞꝟⱱʋ]",w:"[wẂẃẀẁŴŵẄẅẆẇẈẉ]",x:"[xẌẍẊẋχ]",y:"[yÝýỲỳŶŷŸÿỸỹẎẏỴỵɎɏƳƴ]",z:"[zŹźẐẑŽžŻżẒẓẔẕƵƶ]"},c=function(){var t,e,n,i,o="",r={};for(n in a)if(a.hasOwnProperty(n))for(i=a[n].substring(2,a[n].length-1),o+=i,t=0,e=i.length;t<e;t++)r[i.charAt(t)]=n;var s=new RegExp("["+o+"]","g");return function(t){return t.replace(s,function(t){return r[t]}).toLowerCase()}}();return t}),function(t,e){"function"==typeof define&&define.amd?define("microplugin",e):"object"==typeof exports?module.exports=e():t.MicroPlugin=e()}(this,function(){var t={};t.mixin=function(t){t.plugins={},t.prototype.initializePlugins=function(t){var n,i,o,r=this,s=[];if(r.plugins={names:[],settings:{},requested:{},loaded:{}},e.isArray(t))for(n=0,i=t.length;n<i;n++)"string"==typeof t[n]?s.push(t[n]):(r.plugins.settings[t[n].name]=t[n].options,s.push(t[n].name));else if(t)for(o in t)t.hasOwnProperty(o)&&(r.plugins.settings[o]=t[o],s.push(o));for(;s.length;)r.require(s.shift())},t.prototype.loadPlugin=function(e){var n=this,i=n.plugins,o=t.plugins[e];if(!t.plugins.hasOwnProperty(e))throw new Error('Unable to find "'+e+'" plugin');i.requested[e]=!0,i.loaded[e]=o.fn.apply(n,[n.plugins.settings[e]||{}]),i.names.push(e)},t.prototype.require=function(t){var e=this,n=e.plugins;if(!e.plugins.loaded.hasOwnProperty(t)){if(n.requested[t])throw new Error('Plugin has circular dependency ("'+t+'")');e.loadPlugin(t)}return n.loaded[t]},t.define=function(e,n){t.plugins[e]={name:e,fn:n}}};var e={isArray:Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}};return t}),function(t,e){"function"==typeof define&&define.amd?define("selectize",["jquery","sifter","microplugin"],e):"object"==typeof exports?module.exports=e(require("jquery"),require("sifter"),require("microplugin")):t.Selectize=e(t.jQuery,t.Sifter,t.MicroPlugin)}(this,function(t,e,n){"use strict";var i=function(t,e){if("string"!=typeof e||e.length){var n="string"==typeof e?new RegExp(e,"i"):e,i=function(t){var e=0;if(3===t.nodeType){var o=t.data.search(n);if(o>=0&&t.data.length>0){var r=t.data.match(n),s=document.createElement("span");s.className="highlight";var a=t.splitText(o),c=(a.splitText(r[0].length),a.cloneNode(!0));s.appendChild(c),a.parentNode.replaceChild(s,a),e=1}}else if(1===t.nodeType&&t.childNodes&&!/(script|style)/i.test(t.tagName))for(var l=0;l<t.childNodes.length;++l)l+=i(t.childNodes[l]);return e};return t.each(function(){i(this)})}};t.fn.removeHighlight=function(){return this.find("span.highlight").each(function(){this.parentNode.firstChild.nodeName;var t=this.parentNode;t.replaceChild(this.firstChild,this),t.normalize()}).end()};var o=function(){};o.prototype={on:function(t,e){this._events=this._events||{},this._events[t]=this._events[t]||[],this._events[t].push(e)},off:function(t,e){var n=arguments.length;return 0===n?delete this._events:1===n?delete this._events[t]:(this._events=this._events||{},void(t in this._events!=!1&&this._events[t].splice(this._events[t].indexOf(e),1)))},trigger:function(t){if(this._events=this._events||{},t in this._events!=!1)for(var e=0;e<this._events[t].length;e++)this._events[t][e].apply(this,Array.prototype.slice.call(arguments,1))}},o.mixin=function(t){for(var e=["on","off","trigger"],n=0;n<e.length;n++)t.prototype[e[n]]=o.prototype[e[n]]};var r=/Mac/.test(navigator.userAgent),s=r?91:17,a=r?18:17,c=!/android/i.test(window.navigator.userAgent)&&!!document.createElement("input").validity,l=function(t){return void 0!==t},u=function(t){return void 0===t||null===t?null:"boolean"==typeof t?t?"1":"0":t+""},d=function(t){return(t+"").replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;")},p={};p.before=function(t,e,n){var i=t[e];t[e]=function(){return n.apply(t,arguments),i.apply(t,arguments)}},p.after=function(t,e,n){var i=t[e];t[e]=function(){var e=i.apply(t,arguments);return n.apply(t,arguments),e}};var f=function(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}},h=function(t,e){var n;return function(){var i=this,o=arguments;window.clearTimeout(n),n=window.setTimeout(function(){t.apply(i,o)},e)}},g=function(t,e,n){var i,o=t.trigger,r={};t.trigger=function(){var n=arguments[0];if(-1===e.indexOf(n))return o.apply(t,arguments);r[n]=arguments},n.apply(t,[]),t.trigger=o;for(i in r)r.hasOwnProperty(i)&&o.apply(t,r[i])},v=function(t,e,n,i){t.on(e,n,function(e){for(var n=e.target;n&&n.parentNode!==t[0];)n=n.parentNode;return e.currentTarget=n,i.apply(this,[e])})},m=function(t){var e={};if("selectionStart"in t)e.start=t.selectionStart,e.length=t.selectionEnd-e.start;else if(document.selection){t.focus();var n=document.selection.createRange(),i=document.selection.createRange().text.length;n.moveStart("character",-t.value.length),e.start=n.text.length-i,e.length=i}return e},y=function(t,e,n){var i,o,r={};if(n)for(i=0,o=n.length;i<o;i++)r[n[i]]=t.css(n[i]);else r=t.css();e.css(r)},w=function(e,n){if(!e)return 0;var i=t("<test>").css({position:"absolute",top:-99999,left:-99999,width:"auto",padding:0,whiteSpace:"pre"}).text(e).appendTo("body");y(n,i,["letterSpacing","fontSize","fontFamily","fontWeight","textTransform"]);var o=i.width();return i.remove(),o},b=function(t){var e=null,n=function(n,i){var o,r,s,a,c,l,u,d;n=n||window.event||{},i=i||{},n.metaKey||n.altKey||(i.force||!1!==t.data("grow"))&&(o=t.val(),n.type&&"keydown"===n.type.toLowerCase()&&(r=n.keyCode,s=r>=97&&r<=122||r>=65&&r<=90||r>=48&&r<=57||32===r,46===r||8===r?(d=m(t[0]),d.length?o=o.substring(0,d.start)+o.substring(d.start+d.length):8===r&&d.start?o=o.substring(0,d.start-1)+o.substring(d.start+1):46===r&&void 0!==d.start&&(o=o.substring(0,d.start)+o.substring(d.start+1))):s&&(l=n.shiftKey,u=String.fromCharCode(n.keyCode),u=l?u.toUpperCase():u.toLowerCase(),o+=u)),a=t.attr("placeholder"),!o&&a&&(o=a),(c=w(o,t)+4)!==e&&(e=c,t.width(c),t.triggerHandler("resize")))};t.on("keydown keyup update blur",n),n()},C=function(t){var e=document.createElement("div");return e.appendChild(t.cloneNode(!0)),e.innerHTML},x=function(n,i){var o,r,s,a,c=this;a=n[0],a.selectize=c;var l=window.getComputedStyle&&window.getComputedStyle(a,null);if(s=l?l.getPropertyValue("direction"):a.currentStyle&&a.currentStyle.direction,s=s||n.parents("[dir]:first").attr("dir")||"",t.extend(c,{order:0,settings:i,$input:n,tabIndex:n.attr("tabindex")||"",tagType:"select"===a.tagName.toLowerCase()?1:2,rtl:/rtl/i.test(s),eventNS:".selectize"+ ++x.count,highlightedValue:null,isOpen:!1,isDisabled:!1,isRequired:n.is("[required]"),isInvalid:!1,isLocked:!1,isFocused:!1,isInputHidden:!1,isSetup:!1,isShiftDown:!1,isCmdDown:!1,isCtrlDown:!1,ignoreFocus:!1,ignoreBlur:!1,ignoreHover:!1,hasOptions:!1,currentResults:null,lastValue:"",caretPos:0,loading:0,loadedSearches:{},$activeOption:null,$activeItems:[],optgroups:{},options:{},userOptions:{},items:[],renderCache:{},onSearchChange:null===i.loadThrottle?c.onSearchChange:h(c.onSearchChange,i.loadThrottle)}),c.sifter=new e(this.options,{diacritics:i.diacritics}),c.settings.options){for(o=0,r=c.settings.options.length;o<r;o++)c.registerOption(c.settings.options[o]);delete c.settings.options}if(c.settings.optgroups){for(o=0,r=c.settings.optgroups.length;o<r;o++)c.registerOptionGroup(c.settings.optgroups[o]);delete c.settings.optgroups}c.settings.mode=c.settings.mode||(1===c.settings.maxItems?"single":"multi"),"boolean"!=typeof c.settings.hideSelected&&(c.settings.hideSelected="multi"===c.settings.mode),c.initializePlugins(c.settings.plugins),c.setupCallbacks(),c.setupTemplates(),c.setup()};return o.mixin(x),void 0!==n?n.mixin(x):function(t,e){e||(e={});console.error("Selectize: "+t),e.explanation&&(console.group&&console.group(),console.error(e.explanation),console.group&&console.groupEnd())}("Dependency MicroPlugin is missing",{explanation:'Make sure you either: (1) are using the "standalone" version of Selectize, or (2) require MicroPlugin before you load Selectize.'}),t.extend(x.prototype,{setup:function(){var e,n,i,o,l,u,d,p,f,h,g=this,m=g.settings,y=g.eventNS,w=t(window),C=t(document),x=g.$input;if(d=g.settings.mode,p=x.attr("class")||"",e=t("<div>").addClass(m.wrapperClass).addClass(p).addClass(d),n=t("<div>").addClass(m.inputClass).addClass("items").appendTo(e),i=t('<input type="text" autocomplete="off" />').appendTo(n).attr("tabindex",x.is(":disabled")?"-1":g.tabIndex),u=t(m.dropdownParent||e),o=t("<div>").addClass(m.dropdownClass).addClass(d).hide().appendTo(u),l=t("<div>").addClass(m.dropdownContentClass).appendTo(o),(h=x.attr("id"))&&(i.attr("id",h+"-selectized"),t("label[for='"+h+"']").attr("for",h+"-selectized")),g.settings.copyClassesToDropdown&&o.addClass(p),e.css({width:x[0].style.width}),g.plugins.names.length&&(f="plugin-"+g.plugins.names.join(" plugin-"),e.addClass(f),o.addClass(f)),(null===m.maxItems||m.maxItems>1)&&1===g.tagType&&x.attr("multiple","multiple"),g.settings.placeholder&&i.attr("placeholder",m.placeholder),!g.settings.splitOn&&g.settings.delimiter){var O=g.settings.delimiter.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&");g.settings.splitOn=new RegExp("\\s*"+O+"+\\s*")}x.attr("autocorrect")&&i.attr("autocorrect",x.attr("autocorrect")),x.attr("autocapitalize")&&i.attr("autocapitalize",x.attr("autocapitalize")),g.$wrapper=e,g.$control=n,g.$control_input=i,g.$dropdown=o,g.$dropdown_content=l,o.on("mouseenter","[data-selectable]",function(){return g.onOptionHover.apply(g,arguments)}),o.on("mousedown click","[data-selectable]",function(){return g.onOptionSelect.apply(g,arguments)}),v(n,"mousedown","*:not(input)",function(){return g.onItemSelect.apply(g,arguments)}),b(i),n.on({mousedown:function(){return g.onMouseDown.apply(g,arguments)},click:function(){return g.onClick.apply(g,arguments)}}),i.on({mousedown:function(t){t.stopPropagation()},keydown:function(){return g.onKeyDown.apply(g,arguments)},keyup:function(){return g.onKeyUp.apply(g,arguments)},keypress:function(){return g.onKeyPress.apply(g,arguments)},resize:function(){g.positionDropdown.apply(g,[])},blur:function(){return g.onBlur.apply(g,arguments)},focus:function(){return g.ignoreBlur=!1,g.onFocus.apply(g,arguments)},paste:function(){return g.onPaste.apply(g,arguments)}}),C.on("keydown"+y,function(t){g.isCmdDown=t[r?"metaKey":"ctrlKey"],g.isCtrlDown=t[r?"altKey":"ctrlKey"],g.isShiftDown=t.shiftKey}),C.on("keyup"+y,function(t){t.keyCode===a&&(g.isCtrlDown=!1),16===t.keyCode&&(g.isShiftDown=!1),t.keyCode===s&&(g.isCmdDown=!1)}),C.on("mousedown"+y,function(t){if(g.isFocused){if(t.target===g.$dropdown[0]||t.target.parentNode===g.$dropdown[0])return!1;g.$control.has(t.target).length||t.target===g.$control[0]||g.blur(t.target)}}),w.on(["scroll"+y,"resize"+y].join(" "),function(){g.isOpen&&g.positionDropdown.apply(g,arguments)}),w.on("mousemove"+y,function(){g.ignoreHover=!1}),this.revertSettings={$children:x.children().detach(),tabindex:x.attr("tabindex")},x.attr("tabindex",-1).hide().after(g.$wrapper),t.isArray(m.items)&&(g.setValue(m.items),delete m.items),c&&x.on("invalid"+y,function(t){t.preventDefault(),g.isInvalid=!0,g.refreshState()}),g.updateOriginalInput(),g.refreshItems(),g.refreshState(),g.updatePlaceholder(),g.isSetup=!0,x.is(":disabled")&&g.disable(),g.on("change",this.onChange),x.data("selectize",g),x.addClass("selectized"),g.trigger("initialize"),!0===m.preload&&g.onSearchChange("")},setupTemplates:function(){var e=this,n=e.settings.labelField,i=e.settings.optgroupLabelField,o={optgroup:function(t){return'<div class="optgroup">'+t.html+"</div>"},optgroup_header:function(t,e){return'<div class="optgroup-header">'+e(t[i])+"</div>"},option:function(t,e){return'<div class="option">'+e(t[n])+"</div>"},item:function(t,e){return'<div class="item">'+e(t[n])+"</div>"},option_create:function(t,e){return'<div class="create">Add <strong>'+e(t.input)+"</strong>&hellip;</div>"}};e.settings.render=t.extend({},o,e.settings.render)},setupCallbacks:function(){var t,e,n={initialize:"onInitialize",change:"onChange",item_add:"onItemAdd",item_remove:"onItemRemove",clear:"onClear",option_add:"onOptionAdd",option_remove:"onOptionRemove",option_clear:"onOptionClear",optgroup_add:"onOptionGroupAdd",optgroup_remove:"onOptionGroupRemove",optgroup_clear:"onOptionGroupClear",dropdown_open:"onDropdownOpen",dropdown_close:"onDropdownClose",type:"onType",load:"onLoad",focus:"onFocus",blur:"onBlur"};for(t in n)n.hasOwnProperty(t)&&(e=this.settings[n[t]])&&this.on(t,e)},onClick:function(t){var e=this;e.isFocused||(e.focus(),t.preventDefault())},onMouseDown:function(e){var n=this,i=e.isDefaultPrevented();t(e.target);if(n.isFocused){if(e.target!==n.$control_input[0])return"single"===n.settings.mode?n.isOpen?n.close():n.open():i||n.setActiveItem(null),!1}else i||window.setTimeout(function(){n.focus()},0)},onChange:function(){this.$input.trigger("change")},onPaste:function(e){var n=this;if(n.isFull()||n.isInputHidden||n.isLocked)return void e.preventDefault();n.settings.splitOn&&setTimeout(function(){var e=n.$control_input.val();if(e.match(n.settings.splitOn))for(var i=t.trim(e).split(n.settings.splitOn),o=0,r=i.length;o<r;o++)n.createItem(i[o])},0)},onKeyPress:function(t){if(this.isLocked)return t&&t.preventDefault();var e=String.fromCharCode(t.keyCode||t.which);return this.settings.create&&"multi"===this.settings.mode&&e===this.settings.delimiter?(this.createItem(),t.preventDefault(),!1):void 0},onKeyDown:function(t){var e=(t.target,this.$control_input[0],this);if(e.isLocked)return void(9!==t.keyCode&&t.preventDefault());switch(t.keyCode){case 65:if(e.isCmdDown)return void e.selectAll();break;case 27:return void(e.isOpen&&(t.preventDefault(),t.stopPropagation(),e.close()));case 78:if(!t.ctrlKey||t.altKey)break;case 40:if(!e.isOpen&&e.hasOptions)e.open();else if(e.$activeOption){e.ignoreHover=!0;var n=e.getAdjacentOption(e.$activeOption,1);n.length&&e.setActiveOption(n,!0,!0)}return void t.preventDefault();case 80:if(!t.ctrlKey||t.altKey)break;case 38:if(e.$activeOption){e.ignoreHover=!0;var i=e.getAdjacentOption(e.$activeOption,-1);i.length&&e.setActiveOption(i,!0,!0)}return void t.preventDefault();case 13:return void(e.isOpen&&e.$activeOption&&(e.onOptionSelect({currentTarget:e.$activeOption}),t.preventDefault()));case 37:return void e.advanceSelection(-1,t);case 39:return void e.advanceSelection(1,t);case 9:return e.settings.selectOnTab&&e.isOpen&&e.$activeOption&&(e.onOptionSelect({currentTarget:e.$activeOption}),e.isFull()||t.preventDefault()),void(e.settings.create&&e.createItem()&&t.preventDefault());case 8:case 46:return void e.deleteSelection(t)}return!e.isFull()&&!e.isInputHidden||(r?t.metaKey:t.ctrlKey)?void 0:void t.preventDefault()},onKeyUp:function(t){var e=this;if(e.isLocked)return t&&t.preventDefault();var n=e.$control_input.val()||"";e.lastValue!==n&&(e.lastValue=n,e.onSearchChange(n),e.refreshOptions(),e.trigger("type",n))},onSearchChange:function(t){var e=this,n=e.settings.load;n&&(e.loadedSearches.hasOwnProperty(t)||(e.loadedSearches[t]=!0,e.load(function(i){n.apply(e,[t,i])})))},onFocus:function(t){var e=this,n=e.isFocused;if(e.isDisabled)return e.blur(),t&&t.preventDefault(),!1;e.ignoreFocus||(e.isFocused=!0,"focus"===e.settings.preload&&e.onSearchChange(""),n||e.trigger("focus"),e.$activeItems.length||(e.showInput(),e.setActiveItem(null),e.refreshOptions(!!e.settings.openOnFocus)),e.refreshState())},onBlur:function(t,e){var n=this;if(n.isFocused&&(n.isFocused=!1,!n.ignoreFocus)){if(!n.ignoreBlur&&document.activeElement===n.$dropdown_content[0])return n.ignoreBlur=!0,void n.onFocus(t);var i=function(){n.close(),n.setTextboxValue(""),n.setActiveItem(null),n.setActiveOption(null),n.setCaret(n.items.length),n.refreshState(),e&&e.focus&&e.focus(),n.ignoreFocus=!1,n.trigger("blur")};n.ignoreFocus=!0,n.settings.create&&n.settings.createOnBlur?n.createItem(null,!1,i):i()}},onOptionHover:function(t){this.ignoreHover||this.setActiveOption(t.currentTarget,!1)},onOptionSelect:function(e){var n,i,o=this;e.preventDefault&&(e.preventDefault(),e.stopPropagation()),i=t(e.currentTarget),i.hasClass("create")?o.createItem(null,function(){o.settings.closeAfterSelect&&o.close()}):void 0!==(n=i.attr("data-value"))&&(o.lastQuery=null,o.setTextboxValue(""),o.addItem(n),o.settings.closeAfterSelect?o.close():!o.settings.hideSelected&&e.type&&/mouse/.test(e.type)&&o.setActiveOption(o.getOption(n)))},onItemSelect:function(t){var e=this;e.isLocked||"multi"===e.settings.mode&&(t.preventDefault(),e.setActiveItem(t.currentTarget,t))},load:function(t){var e=this,n=e.$wrapper.addClass(e.settings.loadingClass);e.loading++,t.apply(e,[function(t){e.loading=Math.max(e.loading-1,0),t&&t.length&&(e.addOption(t),e.refreshOptions(e.isFocused&&!e.isInputHidden)),e.loading||n.removeClass(e.settings.loadingClass),e.trigger("load",t)}])},setTextboxValue:function(t){var e=this.$control_input;e.val()!==t&&(e.val(t).triggerHandler("update"),this.lastValue=t)},getValue:function(){return 1===this.tagType&&this.$input.attr("multiple")?this.items:this.items.join(this.settings.delimiter)},setValue:function(t,e){g(this,e?[]:["change"],function(){this.clear(e),this.addItems(t,e)})},setActiveItem:function(e,n){var i,o,r,s,a,c,l,u,d=this;if("single"!==d.settings.mode){if(e=t(e),!e.length)return t(d.$activeItems).removeClass("active"),d.$activeItems=[],void(d.isFocused&&d.showInput());if("mousedown"===(i=n&&n.type.toLowerCase())&&d.isShiftDown&&d.$activeItems.length){for(u=d.$control.children(".active:last"),s=Array.prototype.indexOf.apply(d.$control[0].childNodes,[u[0]]),a=Array.prototype.indexOf.apply(d.$control[0].childNodes,[e[0]]),s>a&&(l=s,s=a,a=l),o=s;o<=a;o++)c=d.$control[0].childNodes[o],-1===d.$activeItems.indexOf(c)&&(t(c).addClass("active"),d.$activeItems.push(c));n.preventDefault()}else"mousedown"===i&&d.isCtrlDown||"keydown"===i&&this.isShiftDown?e.hasClass("active")?(r=d.$activeItems.indexOf(e[0]),d.$activeItems.splice(r,1),e.removeClass("active")):d.$activeItems.push(e.addClass("active")[0]):(t(d.$activeItems).removeClass("active"),d.$activeItems=[e.addClass("active")[0]]);d.hideInput(),this.isFocused||d.focus()}},setActiveOption:function(e,n,i){var o,r,s,a,c,u=this;u.$activeOption&&u.$activeOption.removeClass("active"),u.$activeOption=null,e=t(e),e.length&&(u.$activeOption=e.addClass("active"),!n&&l(n)||(o=u.$dropdown_content.height(),r=u.$activeOption.outerHeight(!0),n=u.$dropdown_content.scrollTop()||0,s=u.$activeOption.offset().top-u.$dropdown_content.offset().top+n,a=s,c=s-o+r,s+r>o+n?u.$dropdown_content.stop().animate({scrollTop:c},i?u.settings.scrollDuration:0):s<n&&u.$dropdown_content.stop().animate({scrollTop:a},i?u.settings.scrollDuration:0)))},selectAll:function(){var t=this;"single"!==t.settings.mode&&(t.$activeItems=Array.prototype.slice.apply(t.$control.children(":not(input)").addClass("active")),t.$activeItems.length&&(t.hideInput(),t.close()),t.focus())},hideInput:function(){var t=this;t.setTextboxValue(""),t.$control_input.css({opacity:0,position:"absolute",left:t.rtl?1e4:-1e4}),t.isInputHidden=!0},showInput:function(){this.$control_input.css({opacity:1,position:"relative",left:0}),this.isInputHidden=!1},focus:function(){var t=this;t.isDisabled||(t.ignoreFocus=!0,t.$control_input[0].focus(),window.setTimeout(function(){t.ignoreFocus=!1,t.onFocus()},0))},blur:function(t){this.$control_input[0].blur(),this.onBlur(null,t)},getScoreFunction:function(t){return this.sifter.getScoreFunction(t,this.getSearchOptions())},getSearchOptions:function(){var t=this.settings,e=t.sortField;return"string"==typeof e&&(e=[{field:e}]),{fields:t.searchField,conjunction:t.searchConjunction,sort:e}},search:function(e){var n,i,o,r=this,s=r.settings,a=this.getSearchOptions();if(s.score&&"function"!=typeof(o=r.settings.score.apply(this,[e])))throw new Error('Selectize "score" setting must be a function that returns a function');if(e!==r.lastQuery?(r.lastQuery=e,i=r.sifter.search(e,t.extend(a,{score:o})),r.currentResults=i):i=t.extend(!0,{},r.currentResults),s.hideSelected)for(n=i.items.length-1;n>=0;n--)-1!==r.items.indexOf(u(i.items[n].id))&&i.items.splice(n,1);return i},refreshOptions:function(e){var n,o,r,s,a,c,l,d,p,f,h,g,v,m,y,w;void 0===e&&(e=!0);var b=this,x=t.trim(b.$control_input.val()),O=b.search(x),$=b.$dropdown_content,k=b.$activeOption&&u(b.$activeOption.attr("data-value"));for(s=O.items.length,"number"==typeof b.settings.maxOptions&&(s=Math.min(s,b.settings.maxOptions)),a={},c=[],n=0;n<s;n++)for(l=b.options[O.items[n].id],d=b.render("option",l),p=l[b.settings.optgroupField]||"",f=t.isArray(p)?p:[p],o=0,r=f&&f.length;o<r;o++)p=f[o],b.optgroups.hasOwnProperty(p)||(p=""),a.hasOwnProperty(p)||(a[p]=document.createDocumentFragment(),c.push(p)),a[p].appendChild(d);for(this.settings.lockOptgroupOrder&&c.sort(function(t,e){return(b.optgroups[t].$order||0)-(b.optgroups[e].$order||0)}),h=document.createDocumentFragment(),n=0,s=c.length;n<s;n++)p=c[n],b.optgroups.hasOwnProperty(p)&&a[p].childNodes.length?(g=document.createDocumentFragment(),g.appendChild(b.render("optgroup_header",b.optgroups[p])),g.appendChild(a[p]),h.appendChild(b.render("optgroup",t.extend({},b.optgroups[p],{html:C(g),dom:g})))):h.appendChild(a[p]);if($.html(h),b.settings.highlight&&O.query.length&&O.tokens.length)for($.removeHighlight(),n=0,s=O.tokens.length;n<s;n++)i($,O.tokens[n].regex);if(!b.settings.hideSelected)for(n=0,s=b.items.length;n<s;n++)b.getOption(b.items[n]).addClass("selected");v=b.canCreate(x),v&&($.prepend(b.render("option_create",{input:x})),w=t($[0].childNodes[0])),b.hasOptions=O.items.length>0||v,b.hasOptions?(O.items.length>0?(y=k&&b.getOption(k),y&&y.length?m=y:"single"===b.settings.mode&&b.items.length&&(m=b.getOption(b.items[0])),m&&m.length||(m=w&&!b.settings.addPrecedence?b.getAdjacentOption(w,1):$.find("[data-selectable]:first"))):m=w,b.setActiveOption(m),e&&!b.isOpen&&b.open()):(b.setActiveOption(null),e&&b.isOpen&&b.close())},addOption:function(e){var n,i,o,r=this;if(t.isArray(e))for(n=0,i=e.length;n<i;n++)r.addOption(e[n]);else(o=r.registerOption(e))&&(r.userOptions[o]=!0,r.lastQuery=null,r.trigger("option_add",o,e))},registerOption:function(t){var e=u(t[this.settings.valueField]);return void 0!==e&&null!==e&&!this.options.hasOwnProperty(e)&&(t.$order=t.$order||++this.order,this.options[e]=t,e)},registerOptionGroup:function(t){var e=u(t[this.settings.optgroupValueField]);return!!e&&(t.$order=t.$order||++this.order,this.optgroups[e]=t,e)},addOptionGroup:function(t,e){e[this.settings.optgroupValueField]=t,(t=this.registerOptionGroup(e))&&this.trigger("optgroup_add",t,e)},removeOptionGroup:function(t){this.optgroups.hasOwnProperty(t)&&(delete this.optgroups[t],this.renderCache={},this.trigger("optgroup_remove",t))},clearOptionGroups:function(){this.optgroups={},this.renderCache={},this.trigger("optgroup_clear")},updateOption:function(e,n){var i,o,r,s,a,c,l,d=this;if(e=u(e),r=u(n[d.settings.valueField]),null!==e&&d.options.hasOwnProperty(e)){if("string"!=typeof r)throw new Error("Value must be set in option data");l=d.options[e].$order,r!==e&&(delete d.options[e],-1!==(s=d.items.indexOf(e))&&d.items.splice(s,1,r)),n.$order=n.$order||l,d.options[r]=n,a=d.renderCache.item,c=d.renderCache.option,a&&(delete a[e],delete a[r]),c&&(delete c[e],delete c[r]),-1!==d.items.indexOf(r)&&(i=d.getItem(e),o=t(d.render("item",n)),i.hasClass("active")&&o.addClass("active"),i.replaceWith(o)),d.lastQuery=null,d.isOpen&&d.refreshOptions(!1)}},removeOption:function(t,e){var n=this;t=u(t);var i=n.renderCache.item,o=n.renderCache.option;i&&delete i[t],o&&delete o[t],delete n.userOptions[t],delete n.options[t],n.lastQuery=null,n.trigger("option_remove",t),n.removeItem(t,e)},clearOptions:function(){var t=this;t.loadedSearches={},t.userOptions={},t.renderCache={},t.options=t.sifter.items={},t.lastQuery=null,t.trigger("option_clear"),t.clear()},getOption:function(t){return this.getElementWithValue(t,this.$dropdown_content.find("[data-selectable]"))},getAdjacentOption:function(e,n){var i=this.$dropdown.find("[data-selectable]"),o=i.index(e)+n;return o>=0&&o<i.length?i.eq(o):t()},getElementWithValue:function(e,n){if(void 0!==(e=u(e))&&null!==e)for(var i=0,o=n.length;i<o;i++)if(n[i].getAttribute("data-value")===e)return t(n[i]);return t()},getItem:function(t){return this.getElementWithValue(t,this.$control.children())},addItems:function(e,n){for(var i=t.isArray(e)?e:[e],o=0,r=i.length;o<r;o++)this.isPending=o<r-1,this.addItem(i[o],n)},addItem:function(e,n){g(this,n?[]:["change"],function(){var i,o,r,s,a,c=this,l=c.settings.mode;if(e=u(e),-1!==c.items.indexOf(e))return void("single"===l&&c.close());c.options.hasOwnProperty(e)&&("single"===l&&c.clear(n),"multi"===l&&c.isFull()||(i=t(c.render("item",c.options[e])),a=c.isFull(),c.items.splice(c.caretPos,0,e),c.insertAtCaret(i),(!c.isPending||!a&&c.isFull())&&c.refreshState(),c.isSetup&&(r=c.$dropdown_content.find("[data-selectable]"),c.isPending||(o=c.getOption(e),s=c.getAdjacentOption(o,1).attr("data-value"),c.refreshOptions(c.isFocused&&"single"!==l),s&&c.setActiveOption(c.getOption(s))),!r.length||c.isFull()?c.close():c.positionDropdown(),c.updatePlaceholder(),c.trigger("item_add",e,i),c.updateOriginalInput({silent:n}))))})},removeItem:function(e,n){var i,o,r,s=this;i=e instanceof t?e:s.getItem(e),e=u(i.attr("data-value")),-1!==(o=s.items.indexOf(e))&&(i.remove(),i.hasClass("active")&&(r=s.$activeItems.indexOf(i[0]),s.$activeItems.splice(r,1)),s.items.splice(o,1),s.lastQuery=null,!s.settings.persist&&s.userOptions.hasOwnProperty(e)&&s.removeOption(e,n),o<s.caretPos&&s.setCaret(s.caretPos-1),s.refreshState(),s.updatePlaceholder(),s.updateOriginalInput({silent:n}),s.positionDropdown(),s.trigger("item_remove",e,i))},createItem:function(e,n){var i=this,o=i.caretPos;e=e||t.trim(i.$control_input.val()||"");var r=arguments[arguments.length-1];if("function"!=typeof r&&(r=function(){}),"boolean"!=typeof n&&(n=!0),!i.canCreate(e))return r(),!1;i.lock();var s="function"==typeof i.settings.create?this.settings.create:function(t){var e={};return e[i.settings.labelField]=t,e[i.settings.valueField]=t,e},a=f(function(t){if(i.unlock(),!t||"object"!=typeof t)return r();var e=u(t[i.settings.valueField]);if("string"!=typeof e)return r();i.setTextboxValue(""),i.addOption(t),i.setCaret(o),i.addItem(e),i.refreshOptions(n&&"single"!==i.settings.mode),r(t)}),c=s.apply(this,[e,a]);return void 0!==c&&a(c),!0},refreshItems:function(){this.lastQuery=null,this.isSetup&&this.addItem(this.items),this.refreshState(),this.updateOriginalInput()},refreshState:function(){this.refreshValidityState(),this.refreshClasses()},refreshValidityState:function(){if(!this.isRequired)return!1;var t=!this.items.length;this.isInvalid=t,this.$control_input.prop("required",t),this.$input.prop("required",!t)},refreshClasses:function(){var e=this,n=e.isFull(),i=e.isLocked;e.$wrapper.toggleClass("rtl",e.rtl),e.$control.toggleClass("focus",e.isFocused).toggleClass("disabled",e.isDisabled).toggleClass("required",e.isRequired).toggleClass("invalid",e.isInvalid).toggleClass("locked",i).toggleClass("full",n).toggleClass("not-full",!n).toggleClass("input-active",e.isFocused&&!e.isInputHidden).toggleClass("dropdown-active",e.isOpen).toggleClass("has-options",!t.isEmptyObject(e.options)).toggleClass("has-items",e.items.length>0),e.$control_input.data("grow",!n&&!i)},isFull:function(){return null!==this.settings.maxItems&&this.items.length>=this.settings.maxItems},updateOriginalInput:function(t){var e,n,i,o,r=this;if(t=t||{},1===r.tagType){for(i=[],e=0,n=r.items.length;e<n;e++)o=r.options[r.items[e]][r.settings.labelField]||"",i.push('<option value="'+d(r.items[e])+'" selected="selected">'+d(o)+"</option>");i.length||this.$input.attr("multiple")||i.push('<option value="" selected="selected"></option>'),r.$input.html(i.join(""))}else r.$input.val(r.getValue()),r.$input.attr("value",r.$input.val());r.isSetup&&(t.silent||r.trigger("change",r.$input.val()))},updatePlaceholder:function(){if(this.settings.placeholder){
var t=this.$control_input;this.items.length?t.removeAttr("placeholder"):t.attr("placeholder",this.settings.placeholder),t.triggerHandler("update",{force:!0})}},open:function(){var t=this;t.isLocked||t.isOpen||"multi"===t.settings.mode&&t.isFull()||(t.focus(),t.isOpen=!0,t.refreshState(),t.$dropdown.css({visibility:"hidden",display:"block"}),t.positionDropdown(),t.$dropdown.css({visibility:"visible"}),t.trigger("dropdown_open",t.$dropdown))},close:function(){var t=this,e=t.isOpen;"single"===t.settings.mode&&t.items.length&&(t.hideInput(),t.$control_input.blur()),t.isOpen=!1,t.$dropdown.hide(),t.setActiveOption(null),t.refreshState(),e&&t.trigger("dropdown_close",t.$dropdown)},positionDropdown:function(){var t=this.$control,e="body"===this.settings.dropdownParent?t.offset():t.position();e.top+=t.outerHeight(!0),this.$dropdown.css({width:t.outerWidth(),top:e.top,left:e.left})},clear:function(t){var e=this;e.items.length&&(e.$control.children(":not(input)").remove(),e.items=[],e.lastQuery=null,e.setCaret(0),e.setActiveItem(null),e.updatePlaceholder(),e.updateOriginalInput({silent:t}),e.refreshState(),e.showInput(),e.trigger("clear"))},insertAtCaret:function(e){var n=Math.min(this.caretPos,this.items.length);0===n?this.$control.prepend(e):t(this.$control[0].childNodes[n]).before(e),this.setCaret(n+1)},deleteSelection:function(e){var n,i,o,r,s,a,c,l,u,d=this;if(o=e&&8===e.keyCode?-1:1,r=m(d.$control_input[0]),d.$activeOption&&!d.settings.hideSelected&&(c=d.getAdjacentOption(d.$activeOption,-1).attr("data-value")),s=[],d.$activeItems.length){for(u=d.$control.children(".active:"+(o>0?"last":"first")),a=d.$control.children(":not(input)").index(u),o>0&&a++,n=0,i=d.$activeItems.length;n<i;n++)s.push(t(d.$activeItems[n]).attr("data-value"));e&&(e.preventDefault(),e.stopPropagation())}else(d.isFocused||"single"===d.settings.mode)&&d.items.length&&(o<0&&0===r.start&&0===r.length?s.push(d.items[d.caretPos-1]):o>0&&r.start===d.$control_input.val().length&&s.push(d.items[d.caretPos]));if(!s.length||"function"==typeof d.settings.onDelete&&!1===d.settings.onDelete.apply(d,[s]))return!1;for(void 0!==a&&d.setCaret(a);s.length;)d.removeItem(s.pop());return d.showInput(),d.positionDropdown(),d.refreshOptions(!0),c&&(l=d.getOption(c),l.length&&d.setActiveOption(l)),!0},advanceSelection:function(t,e){var n,i,o,r,s,a=this;0!==t&&(a.rtl&&(t*=-1),n=t>0?"last":"first",i=m(a.$control_input[0]),a.isFocused&&!a.isInputHidden?(r=a.$control_input.val().length,(t<0?0===i.start&&0===i.length:i.start===r)&&!r&&a.advanceCaret(t,e)):(s=a.$control.children(".active:"+n),s.length&&(o=a.$control.children(":not(input)").index(s),a.setActiveItem(null),a.setCaret(t>0?o+1:o))))},advanceCaret:function(t,e){var n,i,o=this;0!==t&&(n=t>0?"next":"prev",o.isShiftDown?(i=o.$control_input[n](),i.length&&(o.hideInput(),o.setActiveItem(i),e&&e.preventDefault())):o.setCaret(o.caretPos+t))},setCaret:function(e){var n=this;if(e="single"===n.settings.mode?n.items.length:Math.max(0,Math.min(n.items.length,e)),!n.isPending){var i,o,r,s;for(r=n.$control.children(":not(input)"),i=0,o=r.length;i<o;i++)s=t(r[i]).detach(),i<e?n.$control_input.before(s):n.$control.append(s)}n.caretPos=e},lock:function(){this.close(),this.isLocked=!0,this.refreshState()},unlock:function(){this.isLocked=!1,this.refreshState()},disable:function(){var t=this;t.$input.prop("disabled",!0),t.$control_input.prop("disabled",!0).prop("tabindex",-1),t.isDisabled=!0,t.lock()},enable:function(){var t=this;t.$input.prop("disabled",!1),t.$control_input.prop("disabled",!1).prop("tabindex",t.tabIndex),t.isDisabled=!1,t.unlock()},destroy:function(){var e=this,n=e.eventNS,i=e.revertSettings;e.trigger("destroy"),e.off(),e.$wrapper.remove(),e.$dropdown.remove(),e.$input.html("").append(i.$children).removeAttr("tabindex").removeClass("selectized").attr({tabindex:i.tabindex}).show(),e.$control_input.removeData("grow"),e.$input.removeData("selectize"),t(window).off(n),t(document).off(n),t(document.body).off(n),delete e.$input[0].selectize},render:function(e,n){var i,o,r="",s=!1,a=this;return"option"!==e&&"item"!==e||(i=u(n[a.settings.valueField]),s=!!i),s&&(l(a.renderCache[e])||(a.renderCache[e]={}),a.renderCache[e].hasOwnProperty(i))?a.renderCache[e][i]:(r=t(a.settings.render[e].apply(this,[n,d])),"option"===e||"option_create"===e?r.attr("data-selectable",""):"optgroup"===e&&(o=n[a.settings.optgroupValueField]||"",r.attr("data-group",o)),"option"!==e&&"item"!==e||r.attr("data-value",i||""),s&&(a.renderCache[e][i]=r[0]),r[0])},clearCache:function(t){var e=this;void 0===t?e.renderCache={}:delete e.renderCache[t]},canCreate:function(t){var e=this;if(!e.settings.create)return!1;var n=e.settings.createFilter;return t.length&&("function"!=typeof n||n.apply(e,[t]))&&("string"!=typeof n||new RegExp(n).test(t))&&(!(n instanceof RegExp)||n.test(t))}}),x.count=0,x.defaults={options:[],optgroups:[],plugins:[],delimiter:",",splitOn:null,persist:!0,diacritics:!0,create:!1,createOnBlur:!1,createFilter:null,highlight:!0,openOnFocus:!0,maxOptions:1e3,maxItems:null,hideSelected:null,addPrecedence:!1,selectOnTab:!1,preload:!1,allowEmptyOption:!1,closeAfterSelect:!1,scrollDuration:60,loadThrottle:300,loadingClass:"loading",dataAttr:"data-data",optgroupField:"optgroup",valueField:"value",labelField:"text",optgroupLabelField:"label",optgroupValueField:"value",lockOptgroupOrder:!1,sortField:"$order",searchField:["text"],searchConjunction:"and",mode:null,wrapperClass:"selectize-control",inputClass:"selectize-input",dropdownClass:"selectize-dropdown",dropdownContentClass:"selectize-dropdown-content",dropdownParent:null,copyClassesToDropdown:!0,render:{}},t.fn.selectize=function(e){var n=t.fn.selectize.defaults,i=t.extend({},n,e),o=i.dataAttr,r=i.labelField,s=i.valueField,a=i.optgroupField,c=i.optgroupLabelField,l=i.optgroupValueField,d=function(e,n){var a,c,l,u,d=e.attr(o);if(d)for(n.options=JSON.parse(d),a=0,c=n.options.length;a<c;a++)n.items.push(n.options[a][s]);else{var p=t.trim(e.val()||"");if(!i.allowEmptyOption&&!p.length)return;for(l=p.split(i.delimiter),a=0,c=l.length;a<c;a++)u={},u[r]=l[a],u[s]=l[a],n.options.push(u);n.items=l}},p=function(e,n){var d,p,f,h,g=n.options,v={},m=function(t){var e=o&&t.attr(o);return"string"==typeof e&&e.length?JSON.parse(e):null},y=function(e,o){e=t(e);var c=u(e.val());if(c||i.allowEmptyOption)if(v.hasOwnProperty(c)){if(o){var l=v[c][a];l?t.isArray(l)?l.push(o):v[c][a]=[l,o]:v[c][a]=o}}else{var d=m(e)||{};d[r]=d[r]||e.text(),d[s]=d[s]||c,d[a]=d[a]||o,v[c]=d,g.push(d),e.is(":selected")&&n.items.push(c)}};for(n.maxItems=e.attr("multiple")?null:1,h=e.children(),d=0,p=h.length;d<p;d++)f=h[d].tagName.toLowerCase(),"optgroup"===f?function(e){var i,o,r,s,a;for(e=t(e),r=e.attr("label"),r&&(s=m(e)||{},s[c]=r,s[l]=r,n.optgroups.push(s)),a=t("option",e),i=0,o=a.length;i<o;i++)y(a[i],r)}(h[d]):"option"===f&&y(h[d])};return this.each(function(){if(!this.selectize){var o=t(this),r=this.tagName.toLowerCase(),s=o.attr("placeholder")||o.attr("data-placeholder");s||i.allowEmptyOption||(s=o.children('option[value=""]').text());var a={placeholder:s,options:[],optgroups:[],items:[]};"select"===r?p(o,a):d(o,a),new x(o,t.extend(!0,{},n,a,e))}})},t.fn.selectize.defaults=x.defaults,t.fn.selectize.support={validity:c},x.define("drag_drop",function(e){if(!t.fn.sortable)throw new Error('The "drag_drop" plugin requires jQuery UI "sortable".');if("multi"===this.settings.mode){var n=this;n.lock=function(){var t=n.lock;return function(){var e=n.$control.data("sortable");return e&&e.disable(),t.apply(n,arguments)}}(),n.unlock=function(){var t=n.unlock;return function(){var e=n.$control.data("sortable");return e&&e.enable(),t.apply(n,arguments)}}(),n.setup=function(){var e=n.setup;return function(){e.apply(this,arguments);var i=n.$control.sortable({items:"[data-value]",forcePlaceholderSize:!0,disabled:n.isLocked,start:function(t,e){e.placeholder.css("width",e.helper.css("width")),i.css({overflow:"visible"})},stop:function(){i.css({overflow:"hidden"});var e=n.$activeItems?n.$activeItems.slice():null,o=[];i.children("[data-value]").each(function(){o.push(t(this).attr("data-value"))}),n.setValue(o),n.setActiveItem(e)}})}}()}}),x.define("dropdown_header",function(e){var n=this;e=t.extend({title:"Untitled",headerClass:"selectize-dropdown-header",titleRowClass:"selectize-dropdown-header-title",labelClass:"selectize-dropdown-header-label",closeClass:"selectize-dropdown-header-close",html:function(t){return'<div class="'+t.headerClass+'"><div class="'+t.titleRowClass+'"><span class="'+t.labelClass+'">'+t.title+'</span><a href="javascript:void(0)" class="'+t.closeClass+'">&times;</a></div></div>'}},e),n.setup=function(){var i=n.setup;return function(){i.apply(n,arguments),n.$dropdown_header=t(e.html(e)),n.$dropdown.prepend(n.$dropdown_header)}}()}),x.define("optgroup_columns",function(e){var n=this;e=t.extend({equalizeWidth:!0,equalizeHeight:!0},e),this.getAdjacentOption=function(e,n){var i=e.closest("[data-group]").find("[data-selectable]"),o=i.index(e)+n;return o>=0&&o<i.length?i.eq(o):t()},this.onKeyDown=function(){var t=n.onKeyDown;return function(e){var i,o,r,s;return!this.isOpen||37!==e.keyCode&&39!==e.keyCode?t.apply(this,arguments):(n.ignoreHover=!0,s=this.$activeOption.closest("[data-group]"),i=s.find("[data-selectable]").index(this.$activeOption),s=37===e.keyCode?s.prev("[data-group]"):s.next("[data-group]"),r=s.find("[data-selectable]"),o=r.eq(Math.min(r.length-1,i)),void(o.length&&this.setActiveOption(o)))}}();var i=function(){var t,e=i.width,n=document;return void 0===e&&(t=n.createElement("div"),t.innerHTML='<div style="width:50px;height:50px;position:absolute;left:-50px;top:-50px;overflow:auto;"><div style="width:1px;height:100px;"></div></div>',t=t.firstChild,n.body.appendChild(t),e=i.width=t.offsetWidth-t.clientWidth,n.body.removeChild(t)),e},o=function(){var o,r,s,a,c,l,u;if(u=t("[data-group]",n.$dropdown_content),(r=u.length)&&n.$dropdown_content.width()){if(e.equalizeHeight){for(s=0,o=0;o<r;o++)s=Math.max(s,u.eq(o).height());u.css({height:s})}e.equalizeWidth&&(l=n.$dropdown_content.innerWidth()-i(),a=Math.round(l/r),u.css({width:a}),r>1&&(c=l-a*(r-1),u.eq(r-1).css({width:c})))}};(e.equalizeHeight||e.equalizeWidth)&&(p.after(this,"positionDropdown",o),p.after(this,"refreshOptions",o))}),x.define("remove_button",function(e){e=t.extend({label:"&times;",title:"Remove",className:"remove",append:!0},e);if("single"===this.settings.mode)return void function(e,n){n.className="remove-single";var i=e,o='<a href="javascript:void(0)" class="'+n.className+'" tabindex="-1" title="'+d(n.title)+'">'+n.label+"</a>",r=function(t,e){return t+e};e.setup=function(){var s=i.setup;return function(){if(n.append){var a=t(i.$input.context).attr("id"),c=(t("#"+a),i.settings.render.item);i.settings.render.item=function(t){return r(c.apply(e,arguments),o)}}s.apply(e,arguments),e.$control.on("click","."+n.className,function(t){t.preventDefault(),i.isLocked||i.clear()})}}()}(this,e);!function(e,n){var i=e,o='<a href="javascript:void(0)" class="'+n.className+'" tabindex="-1" title="'+d(n.title)+'">'+n.label+"</a>",r=function(t,e){var n=t.search(/(<\/[^>]+>\s*)$/);return t.substring(0,n)+e+t.substring(n)};e.setup=function(){var s=i.setup;return function(){if(n.append){var a=i.settings.render.item;i.settings.render.item=function(t){return r(a.apply(e,arguments),o)}}s.apply(e,arguments),e.$control.on("click","."+n.className,function(e){if(e.preventDefault(),!i.isLocked){var n=t(e.currentTarget).parent();i.setActiveItem(n),i.deleteSelection()&&i.setCaret(i.items.length)}})}}()}(this,e)}),x.define("restore_on_backspace",function(t){var e=this;t.text=t.text||function(t){return t[this.settings.labelField]},this.onKeyDown=function(){var n=e.onKeyDown;return function(e){var i,o;return 8===e.keyCode&&""===this.$control_input.val()&&!this.$activeItems.length&&(i=this.caretPos-1)>=0&&i<this.items.length?(o=this.options[this.items[i]],this.deleteSelection(e)&&(this.setTextboxValue(t.text.apply(this,[o])),this.refreshOptions(!0)),void e.preventDefault()):n.apply(this,arguments)}}()}),x}),function(t,e){function n(e,n){n=n||{};var i=this,o=n.query||"> :even";t.extend(i,{$el:e,options:n,sections:[],isAccordion:n.accordion||!1,db:!!n.persist&&jQueryCollapseStorage(e.get(0).id)}),i.states=i.db?i.db.read():[],i.$el.find(o).each(function(){new jQueryCollapseSection(t(this),i)}),function(e){i.$el.on("click","[data-collapse-summary] "+(e.options.clickQuery||""),t.proxy(i.handleClick,e)),i.$el.bind("toggle close open",t.proxy(i.handleEvent,e))}(i)}function i(e,n){n.options.clickQuery||e.wrapInner('<a href="#"/>'),t.extend(this,{isOpen:!1,$summary:e.attr("data-collapse-summary",""),$details:e.next(),options:n.options,parent:n}),n.sections.push(this);var i=n.states[this._index()];0===i?this.close(!0):this.$summary.is(".open")||1===i?this.open(!0):this.close(!0)}n.prototype={handleClick:function(e,n){e.preventDefault(),n=n||"toggle";for(var i=this.sections,o=i.length;o--;)if(t.contains(i[o].$summary[0],e.target)){i[o][n]();break}},handleEvent:function(t){if(t.target==this.$el.get(0))return this[t.type]();this.handleClick(t,t.type)},open:function(t){this._change("open",t)},close:function(t){this._change("close",t)},toggle:function(t){this._change("toggle",t)},_change:function(e,n){if(isFinite(n))return this.sections[n][e]();t.each(this.sections,function(t,n){n[e]()})}},i.prototype={toggle:function(){this.isOpen?this.close():this.open()},close:function(t){this._changeState("close",t)},open:function(e){var n=this;n.options.accordion&&!e&&t.each(n.parent.sections,function(t,e){e.close()}),n._changeState("open",e)},_index:function(){return t.inArray(this,this.parent.sections)},_changeState:function(e,n){var i=this;i.isOpen="open"==e,t.isFunction(i.options[e])&&!n?i.options[e].apply(i.$details):i.$details[i.isOpen?"show":"hide"](),i.$summary.toggleClass("open","close"!==e),i.$details.attr("aria-hidden","close"===e),i.$summary.attr("aria-expanded","open"===e),i.$summary.trigger("open"===e?"opened":"closed",i),i.parent.db&&i.parent.db.write(i._index(),i.isOpen)}},t.fn.extend({collapse:function(e,i){return(i?t("body").find("[data-collapse]"):t(this)).each(function(){var o=i?{}:e,r=t(this).attr("data-collapse")||"";t.each(r.split(" "),function(t,e){e&&(o[e]=!0)}),new n(t(this),o)})}}),e.jQueryCollapse=n,e.jQueryCollapseSection=i,t(function(){t.fn.collapse(!1,!0)})}(window.jQuery,window),function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var e;e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,e.Clipboard=t()}}(function(){var t;return function t(e,n,i){function o(s,a){if(!n[s]){if(!e[s]){var c="function"==typeof require&&require;if(!a&&c)return c(s,!0);if(r)return r(s,!0);var l=new Error("Cannot find module '"+s+"'");throw l.code="MODULE_NOT_FOUND",l}var u=n[s]={exports:{}};e[s][0].call(u.exports,function(t){var n=e[s][1][t];return o(n||t)},u,u.exports,t,e,n,i)}return n[s].exports}for(var r="function"==typeof require&&require,s=0;s<i.length;s++)o(i[s]);return o}({1:[function(t,e,n){var i=t("matches-selector");e.exports=function(t,e,n){for(var o=n?t:t.parentNode;o&&o!==document;){if(i(o,e))return o;o=o.parentNode}}},{"matches-selector":5}],2:[function(t,e,n){function i(t,e,n,i,r){var s=o.apply(this,arguments);return t.addEventListener(n,s,r),{destroy:function(){t.removeEventListener(n,s,r)}}}function o(t,e,n,i){return function(n){n.delegateTarget=r(n.target,e,!0),n.delegateTarget&&i.call(t,n)}}var r=t("closest");e.exports=i},{closest:1}],3:[function(t,e,n){n.node=function(t){return void 0!==t&&t instanceof HTMLElement&&1===t.nodeType},n.nodeList=function(t){var e=Object.prototype.toString.call(t);return void 0!==t&&("[object NodeList]"===e||"[object HTMLCollection]"===e)&&"length"in t&&(0===t.length||n.node(t[0]))},n.string=function(t){return"string"==typeof t||t instanceof String},n.fn=function(t){return"[object Function]"===Object.prototype.toString.call(t)}},{}],4:[function(t,e,n){function i(t,e,n){if(!t&&!e&&!n)throw new Error("Missing required arguments");if(!a.string(e))throw new TypeError("Second argument must be a String");if(!a.fn(n))throw new TypeError("Third argument must be a Function");if(a.node(t))return o(t,e,n);if(a.nodeList(t))return r(t,e,n);if(a.string(t))return s(t,e,n);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList")}function o(t,e,n){return t.addEventListener(e,n),{destroy:function(){t.removeEventListener(e,n)}}}function r(t,e,n){return Array.prototype.forEach.call(t,function(t){t.addEventListener(e,n)}),{destroy:function(){Array.prototype.forEach.call(t,function(t){t.removeEventListener(e,n)})}}}function s(t,e,n){return c(document.body,t,e,n)}var a=t("./is"),c=t("delegate");e.exports=i},{"./is":3,delegate:2}],5:[function(t,e,n){function i(t,e){if(r)return r.call(t,e);for(var n=t.parentNode.querySelectorAll(e),i=0;i<n.length;++i)if(n[i]==t)return!0;return!1}var o=Element.prototype,r=o.matchesSelector||o.webkitMatchesSelector||o.mozMatchesSelector||o.msMatchesSelector||o.oMatchesSelector;e.exports=i},{}],6:[function(t,e,n){function i(t){var e;if("INPUT"===t.nodeName||"TEXTAREA"===t.nodeName)t.focus(),t.setSelectionRange(0,t.value.length),e=t.value;else{t.hasAttribute("contenteditable")&&t.focus();var n=window.getSelection(),i=document.createRange();i.selectNodeContents(t),n.removeAllRanges(),n.addRange(i),e=n.toString()}return e}e.exports=i},{}],7:[function(t,e,n){function i(){}i.prototype={on:function(t,e,n){var i=this.e||(this.e={});return(i[t]||(i[t]=[])).push({fn:e,ctx:n}),this},once:function(t,e,n){function i(){o.off(t,i),e.apply(n,arguments)}var o=this;return i._=e,this.on(t,i,n)},emit:function(t){var e=[].slice.call(arguments,1),n=((this.e||(this.e={}))[t]||[]).slice(),i=0,o=n.length;for(i;i<o;i++)n[i].fn.apply(n[i].ctx,e);return this},off:function(t,e){var n=this.e||(this.e={}),i=n[t],o=[];if(i&&e)for(var r=0,s=i.length;r<s;r++)i[r].fn!==e&&i[r].fn._!==e&&o.push(i[r]);return o.length?n[t]=o:delete n[t],this}},e.exports=i},{}],8:[function(e,n,i){!function(o,r){if("function"==typeof t&&t.amd)t(["module","select"],r);else if(void 0!==i)r(n,e("select"));else{var s={exports:{}};r(s,o.select),o.clipboardAction=s.exports}}(this,function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var i=function(t){return t&&t.__esModule?t:{default:t}}(e),o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t},r=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),s=function(){function t(e){n(this,t),this.resolveOptions(e),this.initSelection()}return t.prototype.resolveOptions=function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];this.action=t.action,this.emitter=t.emitter,this.target=t.target,this.text=t.text,this.trigger=t.trigger,this.selectedText=""},t.prototype.initSelection=function(){this.text?this.selectFake():this.target&&this.selectTarget()},t.prototype.selectFake=function(){var t=this,e="rtl"==document.documentElement.getAttribute("dir");this.removeFake(),this.fakeHandlerCallback=function(){return t.removeFake()},this.fakeHandler=document.body.addEventListener("click",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement("textarea"),this.fakeElem.style.fontSize="12pt",this.fakeElem.style.border="0",this.fakeElem.style.padding="0",this.fakeElem.style.margin="0",this.fakeElem.style.position="absolute",this.fakeElem.style[e?"right":"left"]="-9999px",this.fakeElem.style.top=(window.pageYOffset||document.documentElement.scrollTop)+"px",this.fakeElem.setAttribute("readonly",""),this.fakeElem.value=this.text,document.body.appendChild(this.fakeElem),this.selectedText=(0,i.default)(this.fakeElem),this.copyText()},t.prototype.removeFake=function(){this.fakeHandler&&(document.body.removeEventListener("click",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(document.body.removeChild(this.fakeElem),this.fakeElem=null)},t.prototype.selectTarget=function(){this.selectedText=(0,i.default)(this.target),this.copyText()},t.prototype.copyText=function(){var t=void 0;try{t=document.execCommand(this.action)}catch(e){t=!1}this.handleResult(t)},t.prototype.handleResult=function(t){t?this.emitter.emit("success",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)}):this.emitter.emit("error",{action:this.action,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})},t.prototype.clearSelection=function(){this.target&&this.target.blur(),window.getSelection().removeAllRanges()},t.prototype.destroy=function(){this.removeFake()},r(t,[{key:"action",set:function(){var t=arguments.length<=0||void 0===arguments[0]?"copy":arguments[0];if(this._action=t,"copy"!==this._action&&"cut"!==this._action)throw new Error('Invalid "action" value, use either "copy" or "cut"')},get:function(){return this._action}},{key:"target",set:function(t){if(void 0!==t){if(!t||"object"!==(void 0===t?"undefined":o(t))||1!==t.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===this.action&&t.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===this.action&&(t.hasAttribute("readonly")||t.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');this._target=t}},get:function(){return this._target}}]),t}();t.exports=s})},{select:6}],9:[function(e,n,i){!function(o,r){if("function"==typeof t&&t.amd)t(["module","./clipboard-action","tiny-emitter","good-listener"],r);else if(void 0!==i)r(n,e("./clipboard-action"),e("tiny-emitter"),e("good-listener"));else{var s={exports:{}};r(s,o.clipboardAction,o.tinyEmitter,o.goodListener),o.clipboard=s.exports}}(this,function(t,e,n,i){"use strict";function o(t){return t&&t.__esModule?t:{default:t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function c(t,e){var n="data-clipboard-"+t;if(e.hasAttribute(n))return e.getAttribute(n)}var l=o(e),u=o(n),d=o(i),p=function(t){function e(n,i){r(this,e);var o=s(this,t.call(this));return o.resolveOptions(i),o.listenClick(n),o}return a(e,t),e.prototype.resolveOptions=function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];this.action="function"==typeof t.action?t.action:this.defaultAction,this.target="function"==typeof t.target?t.target:this.defaultTarget,this.text="function"==typeof t.text?t.text:this.defaultText},e.prototype.listenClick=function(t){var e=this;this.listener=(0,d.default)(t,"click",function(t){return e.onClick(t)})},e.prototype.onClick=function(t){var e=t.delegateTarget||t.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new l.default({action:this.action(e),target:this.target(e),text:this.text(e),trigger:e,emitter:this})},e.prototype.defaultAction=function(t){return c("action",t)},e.prototype.defaultTarget=function(t){var e=c("target",t);if(e)return document.querySelector(e)},e.prototype.defaultText=function(t){return c("text",t)},e.prototype.destroy=function(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)},e}(u.default);t.exports=p})},{"./clipboard-action":8,"good-listener":4,"tiny-emitter":7}]},{},[9])(9)}),function(t,e){"use strict";var n=function(){function t(t,e,n,i){return"string"==typeof t&&"function"==typeof e&&(n=parseInt(n||10,10),a("actions",t,e,n,i)),d}function e(){var t=u.call(arguments),e=t.shift();return"string"==typeof e&&l("actions",e,t),d}function n(t,e){return"string"==typeof t&&s("actions",t,e),d}function i(t,e,n,i){return"string"==typeof t&&"function"==typeof e&&(n=parseInt(n||10,10),a("filters",t,e,n,i)),d}function o(){var t=u.call(arguments),e=t.shift();return"string"==typeof e?l("filters",e,t):d}function r(t,e){return"string"==typeof t&&s("filters",t,e),d}function s(t,e,n,i){var o,r,s;if(p[t][e])if(n)if(o=p[t][e],i)for(s=o.length;s--;)r=o[s],r.callback===n&&r.context===i&&o.splice(s,1);else for(s=o.length;s--;)o[s].callback===n&&o.splice(s,1);else p[t][e]=[]}function a(t,e,n,i,o){var r={callback:n,priority:i,context:o},s=p[t][e];s?(s.push(r),s=c(s)):s=[r],p[t][e]=s}function c(t){for(var e,n,i,o=1,r=t.length;o<r;o++){for(e=t[o],n=o;(i=t[n-1])&&i.priority>e.priority;)t[n]=t[n-1],--n;t[n]=e}return t}function l(t,e,n){var i,o,r=p[t][e];if(!r)return"filters"===t&&n[0];if(o=r.length,"filters"===t)for(i=0;i<o;i++)n[0]=r[i].callback.apply(r[i].context,n);else for(i=0;i<o;i++)r[i].callback.apply(r[i].context,n);return"filters"!==t||n[0]}var u=Array.prototype.slice,d={removeFilter:r,applyFilters:o,addFilter:i,removeAction:n,doAction:e,addAction:t},p={actions:{},filters:{}};return d};t.notification=t.notification||{},t.notification.hooks=new n}(window),function(t){t(document).ready(function(){t("#carrier-boxes .postbox .switch-container input").change(function(e){t(this).parents(".switch").first().toggleClass("active"),notification.hooks.doAction("notification.carrier.toggled",t(this))})})}(jQuery),function(t){t(document).ready(function(){t(".notification-color-picker:visible").wpColorPicker()}),notification.hooks.addAction("notification.carrier.repeater.row.added",function(t,e){t.find(".notification-color-picker").wpColorPicker()})}(jQuery),function(t){t(document).ready(function(){var e=t(".notification-image-field");t("body").on("click",".notification-image-field .image .preview, .notification-image-field .select-image",function(e){if(e.preventDefault(),$clicked_image_field=t(this).parents(".notification-image-field"),wp.media.frames.frame)return void wp.media.frames.frame.open();wp.media.frames.frame=wp.media({title:notification.i18n.select_image,multiple:!1,library:{type:"image"},button:{text:notification.i18n.use_selected_image}});var n=function(){var t=wp.media.frames.frame.state().get("selection");t&&t.each(function(t){$clicked_image_field.addClass("selected"),$clicked_image_field.find(".image-input").val(t.id),$clicked_image_field.find(".image .preview").attr("src",t.attributes.sizes.thumbnail.url)})};wp.media.frames.frame.on("select",n),wp.media.frames.frame.open()}),e.find(".image .clear").on("click",function(e){e.preventDefault(),t(this).parents(".notification-image-field").removeClass("selected"),t(this).parents(".notification-image-field").find(".image-input").val(""),t(this).parents(".notification-image-field").find(".image .preview").attr("src","")})})}(jQuery),function(t){t(document).ready(function(){t("body").on("change",".recipients-repeater select.recipient-type",function(){var e=t(this),n=e.parent().parent().next().find(".recipient-value").first(),i=e.val(),o=e.parents(".recipients-repeater").first();notification.hooks.doAction("notification.carrier.recipients.type.changed",i,e,n,o)}),notification.hooks.addAction("notification.carrier.recipients.type.changed",function(e,n,i,o){data={action:"get_recipient_input",type:e,carrier:o.data("carrier"),input_name:i.attr("name")},i.attr("disabled",!0),t.post(notification.ajaxurl,data,function(e){if(1==e.success){var n=t(e.data),o=i.parent();o.html(""),o.append(n),notification.hooks.doAction("notification.carrier.recipients.recipient.replaced",n)}})})})}(jQuery),function(t){t(document).ready(function(){function e(e){var i=e.parents(".fields-repeater").first();e.parents(".row").first().animate({opacity:0},400,"linear",function(){t(this).remove(),n(i),notification.hooks.doAction("notification.repeater.row.removed",i)})}var n=function(e){var n=0;e.find(".row:not(.header):not(.model)").each(function(){t(this).find(".notification-field:not(.selectize-control):not(.selectize-dropdown)").each(function(){var e=t(this),i=e.attr("name");e.attr("name",i.replace(/(.*)\[([0-9]+)\]/,"$1["+n+"]"))}),n++})};t(".fields-repeater .model .subfield").each(function(){t(this).find("input, textarea, select").attr("disabled",!0)}),t(".fields-repeater").on("click",".row:not(.header):not(.model) .handle",function(){var n=t(this);t(window).width()>768?e(n):window.confirm(notification.i18n.remove_confirmation)&&e(n)}),t(".add-new-repeater-field").on("click",function(e){e.preventDefault();var i=t(this).prev(".fields-repeater"),o=i.find(".row.model"),r=o.clone().removeClass("model");r.find("input, textarea, select").attr("disabled",!1),r.appendTo(i),n(i),notification.hooks.doAction("notification.repeater.row.added",r,i)})})}(jQuery),function(t){t(document).ready(function(){function e(){var e=[];return t.each(i,function(n,i){$item=t(i),$item.is(":checked")&&e.push($item.val())}),e.join()}var n=t("#export-notifications .button"),i=t('#export-notifications ul li input[type="checkbox"]:not(.select-all)'),o=n.prop("href");t('#export-notifications input[type="checkbox"]').change(function(){t(this).hasClass("select-all")&&(t(this).is(":checked")?i.prop("checked",!0):i.prop("checked",!1)),n.prop("href",o+e())})}),t(document).ready(function(){function e(){s.removeClass("success").removeClass("error").text("")}function n(t,n){e(),s.addClass(t).text(n)}var i=t("#import-notifications .button"),o=t('#import-notifications input[type="file"]'),r=[],s=t("#import-notifications .message");o.on("change",function(i){r=i.target.files,t.each(r,function(t,i){"application/json"!==i.type?(n("error",notification.i18n.valid_json_only),o.val("")):e()})}),i.on("click",function(e){if("true"===i.data("processing"))return!1;e.preventDefault();var s=new FormData;t.each(r,function(t,e){s.append(t,e)}),s.append("action","notification_import_json"),s.append("type","notifications"),s.append("nonce",i.data("nonce")),n("neutral",notification.i18n.importing_data),i.data("processing","true"),t.ajax({url:notification.ajaxurl,type:"POST",data:s,cache:!1,dataType:"json",processData:!1,contentType:!1,success:function(t){t.success?(n("success",t.data),o.val("")):n("error",t.data),i.data("processing","false")},error:function(t,e,i){n("error",i)}})})})}(jQuery),function(t){t(document).ready(function(){t(".log-container .log-item .log-handle").on("click",function(e){e.preventDefault(),t(this).parent().toggleClass("expanded"),t(this).find(".indicator").toggleClass("dashicons-arrow-down dashicons-arrow-up")})})}(jQuery),function(t){t(document).ready(function(){new Clipboard("code.notification-merge-tag").on("success",function(e){var n=t(e.trigger),i=n.text();notification.hooks.doAction("notification.merge_tag.copied",i,n),n.text(notification.i18n.copied),setTimeout(function(){n.text(i)},800)});var e=t(".notification_merge_tags_accordion").collapse();notification.hooks.addAction("notification.trigger.changed",function(n){var i=n.val();data={action:"get_merge_tags_for_trigger",trigger_slug:i},t.post(ajaxurl,data,function(n){0==n.success?alert(n.data):(t("#notification_merge_tags .inside").html(n.data),e=t(".notification_merge_tags_accordion").collapse())})}),t("body").on("keyup","#notification-search-merge-tags",function(){var n=t(this).val().toLowerCase();t(this).val().length>0?(e.trigger("open"),
t(".notification_merge_tags_accordion h2, .notification_merge_tags_accordion .tags-group").hide(),t(".inside li").each(function(){if(t(this).hide(),-1!==t(this).find(".intro code").text().toLowerCase().indexOf(n)){t(this).show();var e=t(this).parents("ul").data("group");t("[data-group="+e+"]").show()}})):(t(".notification_merge_tags_accordion h2, .inside li").show(),e.trigger("close"))})})}(jQuery),function(t){t(document).ready(function(){t(".notification-pretty-select:visible").selectize(),notification.hooks.addAction("notification.carrier.recipients.recipient.replaced",function(t){t.hasClass("notification-pretty-select")&&t.selectize()}),notification.hooks.addAction("notification.repeater.row.added",function(e,n){e.find("select.notification-pretty-select").each(function(){t(this).selectize()})})})}(jQuery),function(t){t(document).ready(function(){t(".underdev-settings .pretty-select").selectize(),new jQueryCollapse(t(".underdev-settings .setting-group"),{open:function(){this.slideDown(100)},close:function(){this.slideUp(100)}}),t(".setting-group-header").click(function(){t(this).parents(".setting-group").find(".form-table").trigger("toggle")})})}(jQuery),function(t){t(document).ready(function(){new Clipboard("#notification-story code").on("success",function(e){var n=t(e.trigger),i=n.find("span").text();n.find("span").text(notification.i18n.copied),setTimeout(function(){n.find("span").text(i)},800)})})}(jQuery),function(t){t(document).ready(function(){t(".column-switch .onoffswitch").on("click",function(e){var n=t(this),i=n.data("postid");e.preventDefault(),notification.hooks.doAction("notification.status.changed",n,i)}),notification.hooks.addAction("notification.status.changed",function(e,n){var i=!e.find("input").attr("checked");e.addClass("loading"),data={action:"change_notification_status",post_id:n,status:i,nonce:e.data("nonce")},t.post(notification.ajaxurl,data,function(t){1==t.success?(e.removeClass("loading"),e.find("input").attr("checked",i)):alert(t.data)})})})}(jQuery),function(t){t(document).ready(function(){t(".group-sync .field-actions .notification-sync-all").on("click",function(e){e.preventDefault();var n=t(this);if(n.attr("disabled"))return!1;n.attr("disabled",!0),t(".group-sync .field-notifications tr").each(function(e,i){var o=t(i).find(".button.notification-sync");o.data("sync-type")===n.data("type")&&notification.hooks.doAction("notification.sync.init",o)})}),t(".group-sync .field-notifications td > .button.notification-sync").on("click",function(e){e.preventDefault(),notification.hooks.doAction("notification.sync.init",t(this))}),notification.hooks.addAction("notification.sync.init",function(e){if(e.attr("disabled"))return!1;var n=e.data("sync-type"),i=e.data("sync-hash"),o=e.data("nonce");e.text();e.attr("disabled",!0),e.text(notification.i18n.synchronizing),data={action:"notification_sync",hash:i,type:n,nonce:o},t.post(notification.ajaxurl,data,function(i){if(1==i.success){var o=e.parent().parent();if("wordpress"===n){var r=o.find("td.title"),s=t("<a>",{text:r.text(),href:i.data});r.html(s)}o.find("td.status").text(notification.i18n.synchronized),e.remove()}else alert(i.data);e.attr("disabled",!1)})})})}(jQuery),function(t){t(document).ready(function(){t("#notification_trigger_select").selectize({render:{item:function(t,e){return"<div>"+t.text.replace(/\[\[(.*)\]\]/g,"")+"</div>"},option:function(t,e){return"<div>"+t.text.replace(/(.*)\[\[(.*)\]\]/g,'<span class="label">$1</span><span class="caption">$2</span>')+"</div>"}}}),t("#notification_trigger_select").selectize().change(function(){notification.hooks.doAction("notification.trigger.changed",t(this))})})}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
